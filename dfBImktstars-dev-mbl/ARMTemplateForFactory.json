{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "dfBImktstars-dev-mbl"
		},
		"dlMktStars_accountKey": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'accountKey' de 'dlMktStars'"
		},
		"srvbimarketstar_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'srvbimarketstar'"
		},
		"dlMktStars_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://samktastartsmbl.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pplExtAfiliados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfExTAfiliados",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfExtAfiliados",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"AfiliadosSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfExtAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtCursos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfExtCursos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfExtCursos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CodProdutos": {},
									"CursosSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfExtCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtMacroRegioes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfMacroRegioes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfMacroRegioes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MacroRegioes": {},
									"regioesSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfMacroRegioes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtProdutor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfExtProdutor",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfExtProdutor",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"ProdutorSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfExtProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfExtStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfExtStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"StatusSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfExtStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtTipoDePagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfExtTipoDePagamento",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfExtTipoDePagamento",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"TipoPagamentoSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfExtTipoDePagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtVendasHotmart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfVendasHotmart",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfExtVendasHotmart",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"vendasHotmartSaida": {},
									"vendasHotmartDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfExtVendasHotmart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplExtraction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pplExtAfiliados",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtAfiliados",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplExtCursos",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplExtAfiliados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtCursos",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplExtMacroRegioes",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplExtCursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtMacroRegioes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplExtProdutor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplExtMacroRegioes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtProdutor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplExtStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplExtProdutor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplExtTipoDePagamento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplExtStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtTipoDePagamento",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplExtVendasHotmart",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplExtTipoDePagamento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplExtVendasHotmart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 - Orquestrador"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pplExtAfiliados')]",
				"[concat(variables('factoryId'), '/pipelines/pplExtCursos')]",
				"[concat(variables('factoryId'), '/pipelines/pplExtMacroRegioes')]",
				"[concat(variables('factoryId'), '/pipelines/pplExtProdutor')]",
				"[concat(variables('factoryId'), '/pipelines/pplExtStatus')]",
				"[concat(variables('factoryId'), '/pipelines/pplExtTipoDePagamento')]",
				"[concat(variables('factoryId'), '/pipelines/pplExtVendasHotmart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplScrCursos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfSrcCursos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSrcCursos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLSilver": {},
									"srcDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSrcCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplSrcAfiliados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfSrcAfiliados",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSrcAfiliados",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLSilver": {},
									"srcDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSrcAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplSrcProdutor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfSrcProdutor",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSrcProdutor",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLSilver": {},
									"srcDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSrcProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplSrcRegiao')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfSrcRegiao",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSrcRegioes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLSilver": {},
									"srcDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSrcRegioes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplSrcStage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pplsrcAfiliados",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplSrcAfiliados",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplsrcCursos",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplsrcAfiliados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplScrCursos",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplsrcProdutor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplsrcCursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplSrcProdutor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplsrcRegiao",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplsrcProdutor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplSrcRegiao",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplSrcTipoPagamento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplsrcStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplSrcTipoPagamento",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplsrcStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplsrcRegiao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplSrcStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 - Orquestrador"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pplSrcAfiliados')]",
				"[concat(variables('factoryId'), '/pipelines/pplScrCursos')]",
				"[concat(variables('factoryId'), '/pipelines/pplSrcProdutor')]",
				"[concat(variables('factoryId'), '/pipelines/pplSrcRegiao')]",
				"[concat(variables('factoryId'), '/pipelines/pplSrcTipoPagamento')]",
				"[concat(variables('factoryId'), '/pipelines/pplSrcStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplSrcStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfSrcStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSrcStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLSilver": {},
									"srcDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSrcStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplSrcTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfSrcTipoPagamento",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSrcTipoPagamento",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DLSilver": {},
									"srcDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSrcTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgAfiliados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfstgAfiliados",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfStgAfiliados",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Stage": {},
									"StageNew": {},
									"StageUpdate": {},
									"StageInativar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfStgAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgCursos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfStgCursos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfstgCursos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"Stage": {},
									"StageNew": {},
									"StageUpdate": {},
									"StageInativar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfstgCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgProdutor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfStgProdutor",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfStgProdutor",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Stage": {},
									"StageNew": {},
									"StageUpdate": {},
									"StageInativar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfStgProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgRegiao')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfStgRegiao",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfstgRegiao",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"Stage": {},
									"StageNew": {},
									"StageUpdate": {},
									"StageInativar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfstgRegiao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgStage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pplStgAfiliados",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplStgAfiliados",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplStgCursos",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplStgAfiliados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplStgCursos",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplStgProdutor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplStgCursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplStgProdutor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplStgRegiao",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplStgProdutor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplStgRegiao",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplStgStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplStgRegiao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplStgStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pplStgTipoPagamento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pplStgStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplStgTipoPagamento",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 - Orquestrador"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pplStgAfiliados')]",
				"[concat(variables('factoryId'), '/pipelines/pplStgCursos')]",
				"[concat(variables('factoryId'), '/pipelines/pplStgProdutor')]",
				"[concat(variables('factoryId'), '/pipelines/pplStgRegiao')]",
				"[concat(variables('factoryId'), '/pipelines/pplStgStatus')]",
				"[concat(variables('factoryId'), '/pipelines/pplStgTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfStgStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfStgStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Stage": {},
									"StageNew": {},
									"StageUpdate": {},
									"StageInativar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfStgStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplStgTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfStgTipoPagamento",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfStgTipoPagamento",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Stage": {},
									"StageNew": {},
									"StageUpdate": {},
									"StageInativar": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfStgTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreAfiliados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfpreAfiliados",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreAfiliados",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreCursos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfpreCursos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreCursos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreProdutor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfpreProdutor",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreProdutor",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreRegioes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfpreRegioes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreRegioes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreRegioes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfpreStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfpreTipoPagamento",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreTipoPagamento",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplpreVendas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfPreVendas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfpreVendas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"goldVendas": {},
									"Destino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 - Fact"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfpreVendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplsrcVendas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfsrcVendas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfsrcVendas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Silver": {},
									"srcAfiliados": {},
									"srcCursos": {},
									"srcProdutor": {},
									"srcRegioes": {},
									"srcStatus": {},
									"srcTipoPagamento": {},
									"GoldVendas": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "4 - Fact"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfsrcVendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pplsrcVendasGold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pplsrcVendas",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pplsrcVendas",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "5 - Orquestrador"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pplsrcVendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtAfiliadosDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "afiliados.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtCodCursosSaida')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Cod-Produtos.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Cod;Nome Novo",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtCursosDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cursos.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Afiliado",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtMacroRegioesDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "regioes.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Tipo de Pagamento",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtMacroRegioesSaida')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Macro Regioes.xlsx",
						"fileSystem": "bronze"
					}
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtProdutorDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "produtor.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Tipo de Pagamento",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtTipoDePagamentoDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TipoPagamento.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Afiliado",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtVendasHotmartDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "vendas.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Tipo de Pagamento",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsExtVendasHotmartSaida')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "vendasHotmartsaida.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Produto",
						"type": "String"
					},
					{
						"name": "Afiliado",
						"type": "String"
					},
					{
						"name": "Nome do Produtor",
						"type": "String"
					},
					{
						"name": "Documento do Produtor",
						"type": "String"
					},
					{
						"name": "Meio de Pagamento",
						"type": "String"
					},
					{
						"name": "Preço do Produto",
						"type": "String"
					},
					{
						"name": "Preço da Oferta",
						"type": "String"
					},
					{
						"name": "Tipo de Pagamento",
						"type": "String"
					},
					{
						"name": "Tipo pagamento oferta",
						"type": "String"
					},
					{
						"name": "Moeda",
						"type": "String"
					},
					{
						"name": "Número da Parcela",
						"type": "String"
					},
					{
						"name": "Recorrência",
						"type": "String"
					},
					{
						"name": "Data de Venda",
						"type": "String"
					},
					{
						"name": "Data de Confirmação",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "DDD",
						"type": "String"
					},
					{
						"name": "Cidade",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsfatVendas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "4 - Fact"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "fvendas.csv",
						"fileSystem": "gold"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dtExtStatusDestino')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dlMktStars",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "status.csv",
						"fileSystem": "silver"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Tipo de Pagamento",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dlMktStars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblStgAfiliados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Afiliados"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblStgCursos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CodProdOrigine",
						"type": "varchar"
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Cursos"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblStgProdutor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Produtor"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblStgRegioes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DDD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cidade",
						"type": "varchar"
					},
					{
						"name": "Estado",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Regioes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblStgStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "Status"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblStgTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					},
					{
						"name": "DataInicio",
						"type": "date"
					},
					{
						"name": "DataFim",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "TipoPagamento"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreAfiliados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "dAfiliados"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreCursos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "varchar"
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "dCursos"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreProdutor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "dProdutor"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreRegioes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DDD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cidade",
						"type": "varchar"
					},
					{
						"name": "Estado",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "dRegioes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "dStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "dTipoPagamento"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblpreVendas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "4 - Fact"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IdProdutor",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IdCurso",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IdAfiliado",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IdTipoPagamento",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IdStatus",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IdRegioes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValorProduto",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Data de Venda",
						"type": "date"
					},
					{
						"name": "QtdParcelas",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "pre",
					"table": "fVendas"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcAfiliados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Afiliados"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcCursos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BK",
						"type": "varchar"
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Cursos"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcProdutor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Produtor"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcRegioes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DDD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cidade",
						"type": "varchar"
					},
					{
						"name": "Estado",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Regioes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "Status"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblsrcTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "srvbimarketstar",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "2 - Stage"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Nome",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "src",
					"table": "TipoPagamento"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/srvbimarketstar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dlMktStars')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dlMktStars_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('dlMktStars_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srvbimarketstar')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('srvbimarketstar_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtAfiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartSaida",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtAfiliadosDestino",
								"type": "DatasetReference"
							},
							"name": "AfiliadosSilver"
						}
					],
					"transformations": [
						{
							"name": "SelecionarColuna"
						},
						{
							"name": "AgregAxiliar"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas select(mapColumn(",
						"          Afiliado",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna aggregate(groupBy(Afiliado),",
						"     Congatem = count(Afiliado)) ~> AgregAxiliar",
						"AgregAxiliar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['afiliados.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Afiliado",
						"     ),",
						"     partitionBy('hash', 1)) ~> AfiliadosSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartSaida')]",
				"[concat(variables('factoryId'), '/datasets/dsExtAfiliadosDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtCursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtCodCursosSaida",
								"type": "DatasetReference"
							},
							"name": "CodProdutos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtCursosDestino",
								"type": "DatasetReference"
							},
							"name": "CursosSilver"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Cod as string,",
						"          {Nome Novo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CodProdutos",
						"CodProdutos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Afiliado as string",
						"     ),",
						"     partitionFileNames:['cursos.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CursosSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtCodCursosSaida')]",
				"[concat(variables('factoryId'), '/datasets/dsExtCursosDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtProdutor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartSaida",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtProdutorDestino",
								"type": "DatasetReference"
							},
							"name": "ProdutorSilver"
						}
					],
					"transformations": [
						{
							"name": "AgregaAuxiliar"
						},
						{
							"name": "SelecionarColuna"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas aggregate(groupBy({Nome do Produtor}),",
						"     Contagem = count(Status)) ~> AgregaAuxiliar",
						"AgregaAuxiliar select(mapColumn(",
						"          {Nome do produtor} = {Nome do Produtor}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Tipo de Pagamento} as string",
						"     ),",
						"     partitionFileNames:['produtor.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ProdutorSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartSaida')]",
				"[concat(variables('factoryId'), '/datasets/dsExtProdutorDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartSaida",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dtExtStatusDestino",
								"type": "DatasetReference"
							},
							"name": "StatusSilver"
						}
					],
					"transformations": [
						{
							"name": "AgregaAuxiliar"
						},
						{
							"name": "SelecionarColuna"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas aggregate(groupBy(Status),",
						"     Contagem = count(Status)) ~> AgregaAuxiliar",
						"AgregaAuxiliar select(mapColumn(",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Tipo de Pagamento} as string",
						"     ),",
						"     partitionFileNames:['status.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> StatusSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartSaida')]",
				"[concat(variables('factoryId'), '/datasets/dtExtStatusDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtTipoDePagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartSaida",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtTipoDePagamentoDestino",
								"type": "DatasetReference"
							},
							"name": "TipoPagamentoSilver"
						}
					],
					"transformations": [
						{
							"name": "AgregAuxiliar"
						},
						{
							"name": "SelecionarColuna"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas aggregate(groupBy({Tipo de Pagamento}),",
						"     Contagem = count()) ~> AgregAuxiliar",
						"AgregAuxiliar select(mapColumn(",
						"          {Tipo de Pagamento}",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColuna",
						"SelecionarColuna sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Afiliado as string",
						"     ),",
						"     partitionFileNames:['TipoPagamento.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> TipoPagamentoSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartSaida')]",
				"[concat(variables('factoryId'), '/datasets/dsExtTipoDePagamentoDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExtVendasHotmart')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartSaida",
								"type": "DatasetReference"
							},
							"name": "vendasHotmartSaida"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartDestino",
								"type": "DatasetReference"
							},
							"name": "vendasHotmartDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> vendasHotmartSaida",
						"vendasHotmartSaida sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Tipo de Pagamento} as string",
						"     ),",
						"     partitionFileNames:['vendas.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> vendasHotmartDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartSaida')]",
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMacroRegioes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1 - Extraction"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtMacroRegioesSaida",
								"type": "DatasetReference"
							},
							"name": "MacroRegioes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsExtMacroRegioesDestino",
								"type": "DatasetReference"
							},
							"name": "regioesSilver"
						}
					],
					"transformations": [
						{
							"name": "dddCidadeEstado"
						},
						{
							"name": "SplitdddCidadeEstado"
						},
						{
							"name": "RegioesSeparadas"
						},
						{
							"name": "Selecao"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MacroRegioes",
						"MacroRegioes derive(dddcidadesestado = substring(Column_1,4,400)) ~> dddCidadeEstado",
						"dddCidadeEstado derive(SplitdddCidadeEstado = split(dddcidadesestado, '–')) ~> SplitdddCidadeEstado",
						"SplitdddCidadeEstado derive(ddd = trim(SplitdddCidadeEstado[1]),",
						"          cidade = left(trim(SplitdddCidadeEstado[2]), length(trim(SplitdddCidadeEstado[2]))-1),",
						"          estado = trim(SplitdddCidadeEstado[3])) ~> RegioesSeparadas",
						"RegioesSeparadas select(mapColumn(",
						"          ddd,",
						"          cidade,",
						"          estado",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Selecao",
						"Selecao sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Tipo de Pagamento} as string",
						"     ),",
						"     partitionFileNames:['regioes.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> regioesSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtMacroRegioesSaida')]",
				"[concat(variables('factoryId'), '/datasets/dsExtMacroRegioesDestino')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSrcAfiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtAfiliadosDestino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblsrcAfiliados",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Afiliado as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = Afiliado",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtAfiliadosDestino')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSrcCursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtCursosDestino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblsrcCursos",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Cod as string,",
						"          {Nome Novo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as string,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Cod,",
						"          Nome = {Nome Novo}",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtCursosDestino')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSrcProdutor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtProdutorDestino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblsrcProdutor",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Nome do produtor} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = {Nome do produtor}",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtProdutorDestino')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSrcRegioes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtMacroRegioesDestino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblsrcRegioes",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ddd as integer,",
						"          cidade as string,",
						"          estado as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DDD = ddd,",
						"          Cidade = cidade,",
						"          Estado = estado",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtMacroRegioesDestino')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcRegioes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSrcStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dtExtStatusDestino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblsrcStatus",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = Status",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dtExtStatusDestino')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSrcTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtTipoDePagamentoDestino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblsrcTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Tipo de Pagamento} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = {Tipo de Pagamento}",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtTipoDePagamentoDestino')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfStgAfiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblsrcAfiliados",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "tblStgAfiliados",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblStgAfiliados",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "tblStgAfiliados",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "tblStgAfiliados",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "ClassSource"
						},
						{
							"name": "NewSource"
						},
						{
							"name": "ClassStage"
						},
						{
							"name": "NewStage"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "JoinLeft"
						},
						{
							"name": "DataStartEnd"
						},
						{
							"name": "split1"
						},
						{
							"name": "AlterarLinha1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> ClassSource",
						"ClassSource select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewSource",
						"Ativos sort(asc(BK, true)) ~> ClassStage",
						"ClassStage select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewStage",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"NewSource, NewStage join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLeft",
						"JoinLeft derive(dataStartEnd = toDate(currentTimestamp())) ~> DataStartEnd",
						"DataStartEnd split(isNull(BK_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> split1@(NovasRegistros, Update, Inativar)",
						"split1@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(Nome_SRC!=Nome_STG))) ~> AlterarLinha1",
						"split1@NovasRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageNew",
						"split1@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageUpdate",
						"AlterarLinha1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataFim = dataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblsrcAfiliados')]",
				"[concat(variables('factoryId'), '/datasets/tblStgAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfStgProdutor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblsrcProdutor",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "tblStgProdutor",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblStgProdutor",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "tblStgProdutor",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "tblStgProdutor",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "ClassSource"
						},
						{
							"name": "NewSource"
						},
						{
							"name": "ClassStage"
						},
						{
							"name": "NewStage"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "JoinLeft"
						},
						{
							"name": "DataStartEnd"
						},
						{
							"name": "split1"
						},
						{
							"name": "AlterarLinha1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> ClassSource",
						"ClassSource select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewSource",
						"Ativos sort(asc(BK, true)) ~> ClassStage",
						"ClassStage select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewStage",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"NewSource, NewStage join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLeft",
						"JoinLeft derive(dataStartEnd = toDate(currentTimestamp())) ~> DataStartEnd",
						"DataStartEnd split(isNull(BK_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> split1@(NovasRegistros, Update, Inativar)",
						"split1@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(Nome_SRC!=Nome_STG))) ~> AlterarLinha1",
						"split1@NovasRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageNew",
						"split1@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageUpdate",
						"AlterarLinha1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataFim = dataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblsrcProdutor')]",
				"[concat(variables('factoryId'), '/datasets/tblStgProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfStgStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblsrcStatus",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "tblStgStatus",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblStgStatus",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "tblStgStatus",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "tblStgStatus",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "ClassSource"
						},
						{
							"name": "NewSource"
						},
						{
							"name": "ClassStage"
						},
						{
							"name": "NewStage"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "JoinLeft"
						},
						{
							"name": "DataStartEnd"
						},
						{
							"name": "split1"
						},
						{
							"name": "AlterarLinha1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> ClassSource",
						"ClassSource select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewSource",
						"Ativos sort(asc(BK, true)) ~> ClassStage",
						"ClassStage select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewStage",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"NewSource, NewStage join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLeft",
						"JoinLeft derive(dataStartEnd = toDate(currentTimestamp())) ~> DataStartEnd",
						"DataStartEnd split(isNull(BK_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> split1@(NovasRegistros, Update, Inativar)",
						"split1@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(Nome_SRC!=Nome_STG))) ~> AlterarLinha1",
						"split1@NovasRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageNew",
						"split1@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageUpdate",
						"AlterarLinha1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataFim = dataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblsrcStatus')]",
				"[concat(variables('factoryId'), '/datasets/tblStgStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfStgTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblsrcTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "tblStgTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblStgTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "tblStgTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "tblStgTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "ClassSource"
						},
						{
							"name": "NewSource"
						},
						{
							"name": "ClassStage"
						},
						{
							"name": "NewStage"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "JoinLeft"
						},
						{
							"name": "DataStartEnd"
						},
						{
							"name": "split1"
						},
						{
							"name": "AlterarLinha1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> ClassSource",
						"ClassSource select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewSource",
						"Ativos sort(asc(BK, true)) ~> ClassStage",
						"ClassStage select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewStage",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"NewSource, NewStage join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLeft",
						"JoinLeft derive(dataStartEnd = toDate(currentTimestamp())) ~> DataStartEnd",
						"DataStartEnd split(isNull(BK_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     (Id_SRC==BK_STG)&&(Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> split1@(NovasRegistros, Update, Inativar)",
						"split1@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(Nome_SRC!=Nome_STG))) ~> AlterarLinha1",
						"split1@NovasRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageNew",
						"split1@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageUpdate",
						"AlterarLinha1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataFim = dataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblsrcTipoPagamento')]",
				"[concat(variables('factoryId'), '/datasets/tblStgTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreAfiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblStgAfiliados",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreAfiliados",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [
						{
							"name": "Ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativos",
						"Ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblStgAfiliados')]",
				"[concat(variables('factoryId'), '/datasets/tblpreAfiliados')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreCursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblStgCursos",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreCursos",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [
						{
							"name": "Ativo"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativo",
						"Ativo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as string,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblStgCursos')]",
				"[concat(variables('factoryId'), '/datasets/tblpreCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreProdutor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblStgProdutor",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreProdutor",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [
						{
							"name": "Ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativos",
						"Ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblStgProdutor')]",
				"[concat(variables('factoryId'), '/datasets/tblpreProdutor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreRegioes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblStgRegioes",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreRegioes",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [
						{
							"name": "Ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativos",
						"Ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          DDD,",
						"          Cidade,",
						"          Estado",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblStgRegioes')]",
				"[concat(variables('factoryId'), '/datasets/tblpreRegioes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblStgStatus",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreStatus",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [
						{
							"name": "Ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativos",
						"Ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblStgStatus')]",
				"[concat(variables('factoryId'), '/datasets/tblpreStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreTipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3 - Presentation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblStgTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "Source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [
						{
							"name": "Ativos"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"Source filter(isNull(DataFim)) ~> Ativos",
						"Ativos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SK as integer,",
						"          BK as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK,",
						"          Nome",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblStgTipoPagamento')]",
				"[concat(variables('factoryId'), '/datasets/tblpreTipoPagamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfpreVendas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "4 - Fact"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsfatVendas",
								"type": "DatasetReference"
							},
							"name": "goldVendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblpreVendas",
								"type": "DatasetReference"
							},
							"name": "Destino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Preço do Produto} as decimal(10,0),",
						"          {Vendas_Número da Parcela} as integer,",
						"          {Vendas_Data de Venda} as date,",
						"          Id_Afiliados as integer,",
						"          Id_Cursos as integer,",
						"          Id_Produtor as integer,",
						"          Id_Regiao as integer,",
						"          Id_Status as integer,",
						"          Id_TipoPagamento as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> goldVendas",
						"goldVendas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          IdProdutor as integer,",
						"          IdCurso as integer,",
						"          IdAfiliado as integer,",
						"          IdTipoPagamento as integer,",
						"          IdStatus as integer,",
						"          IdRegioes as integer,",
						"          ValorProduto as decimal(19,4),",
						"          {Data de Venda} as date,",
						"          QtdParcelas as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          IdProdutor = Id_Produtor,",
						"          IdCurso = Id_Cursos,",
						"          IdAfiliado = Id_Afiliados,",
						"          IdTipoPagamento = Id_TipoPagamento,",
						"          IdStatus = Id_Status,",
						"          IdRegioes = Id_Regiao,",
						"          ValorProduto = {Preço do Produto},",
						"          {Data de Venda} = {Vendas_Data de Venda},",
						"          QtdParcelas = {Vendas_Número da Parcela}",
						"     )) ~> Destino"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsfatVendas')]",
				"[concat(variables('factoryId'), '/datasets/tblpreVendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfsrcVendas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "4 - Fact"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsExtVendasHotmartSaida",
								"type": "DatasetReference"
							},
							"name": "Silver"
						},
						{
							"dataset": {
								"referenceName": "tblsrcAfiliados",
								"type": "DatasetReference"
							},
							"name": "srcAfiliados"
						},
						{
							"dataset": {
								"referenceName": "tblsrcCursos",
								"type": "DatasetReference"
							},
							"name": "srcCursos"
						},
						{
							"dataset": {
								"referenceName": "tblsrcProdutor",
								"type": "DatasetReference"
							},
							"name": "srcProdutor"
						},
						{
							"dataset": {
								"referenceName": "tblsrcRegioes",
								"type": "DatasetReference"
							},
							"name": "srcRegioes"
						},
						{
							"dataset": {
								"referenceName": "tblsrcStatus",
								"type": "DatasetReference"
							},
							"name": "srcStatus"
						},
						{
							"dataset": {
								"referenceName": "tblsrcTipoPagamento",
								"type": "DatasetReference"
							},
							"name": "srcTipoPagamento"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsfatVendas",
								"type": "DatasetReference"
							},
							"name": "GoldVendas"
						}
					],
					"transformations": [
						{
							"name": "selectAfiliados"
						},
						{
							"name": "selectVendas"
						},
						{
							"name": "joinAfiliados"
						},
						{
							"name": "selectCursos"
						},
						{
							"name": "joinCursos"
						},
						{
							"name": "selectProdutor"
						},
						{
							"name": "joinProdutor"
						},
						{
							"name": "selectRegioes"
						},
						{
							"name": "joinRegioes"
						},
						{
							"name": "selectStatus"
						},
						{
							"name": "JoinStatus"
						},
						{
							"name": "selectTipoPagamento"
						},
						{
							"name": "joinTipoPagamento"
						},
						{
							"name": "selectFinal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Produto as string,",
						"          Afiliado as string,",
						"          {Nome do Produtor} as string,",
						"          {Documento do Produtor} as string,",
						"          {Meio de Pagamento} as string,",
						"          {Preço do Produto} as string,",
						"          {Preço da Oferta} as string,",
						"          {Tipo de Pagamento} as string,",
						"          {Tipo pagamento oferta} as string,",
						"          Moeda as string,",
						"          {Número da Parcela} as string,",
						"          {Recorrência} as string,",
						"          {Data de Venda} as string,",
						"          {Data de Confirmação} as string,",
						"          Status as string,",
						"          DDD as string,",
						"          Cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Silver",
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAfiliados",
						"source(output(",
						"          Id as integer,",
						"          BK as string,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCursos",
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcProdutor",
						"source(output(",
						"          Id as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcRegioes",
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcStatus",
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcTipoPagamento",
						"srcAfiliados select(mapColumn(",
						"          Id_Afiliados = Id,",
						"          Nome_Afiliados = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectAfiliados",
						"Silver select(mapColumn(",
						"          Vendas_Produto = Produto,",
						"          Vendas_Afiliado = Afiliado,",
						"          {Vendas_Nome do Produtor} = {Nome do Produtor},",
						"          {Preço do Produto},",
						"          {Vendas_Tipo de Pagamento} = {Tipo de Pagamento},",
						"          {Vendas_Tipo pagamento oferta} = {Tipo pagamento oferta},",
						"          {Vendas_Número da Parcela} = {Número da Parcela},",
						"          {Vendas_Data de Venda} = {Data de Venda},",
						"          Vendas_Status = Status,",
						"          Vendas_Cidade = Cidade,",
						"          Vendas_DDD = DDD",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVendas",
						"selectVendas, selectAfiliados join(Vendas_Afiliado == Nome_Afiliados,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAfiliados",
						"srcCursos select(mapColumn(",
						"          Id_Cursos = Id,",
						"          Nome_Cursos = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCursos",
						"joinAfiliados, selectCursos join(Vendas_Produto == Nome_Cursos,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCursos",
						"srcProdutor select(mapColumn(",
						"          Id_Produtor = Id,",
						"          Nome_Produtor = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProdutor",
						"joinCursos, selectProdutor join({Vendas_Nome do Produtor} == Nome_Produtor,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProdutor",
						"srcRegioes select(mapColumn(",
						"          Id_Regiao = Id,",
						"          DDD_Regiao = DDD,",
						"          Cidade_Regiao = Cidade,",
						"          Estado_Regiao = Estado",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRegioes",
						"joinProdutor, selectRegioes join(Vendas_DDD == toString(DDD_Regiao),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinRegioes",
						"srcStatus select(mapColumn(",
						"          Id_Status = Id,",
						"          Nome_Status = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStatus",
						"joinRegioes, selectStatus join(Vendas_Status == Nome_Status,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinStatus",
						"srcTipoPagamento select(mapColumn(",
						"          Id_TipoPagamento = Id,",
						"          Nome_TipoPagamento = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTipoPagamento",
						"JoinStatus, selectTipoPagamento join({Vendas_Tipo de Pagamento} == Nome_TipoPagamento,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinTipoPagamento",
						"joinTipoPagamento select(mapColumn(",
						"          {Preço do Produto},",
						"          {Vendas_Número da Parcela},",
						"          {Vendas_Data de Venda},",
						"          Id_Afiliados,",
						"          Id_Cursos,",
						"          Id_Produtor,",
						"          Id_Regiao,",
						"          Id_Status,",
						"          Id_TipoPagamento",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"selectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['fvendas.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> GoldVendas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsExtVendasHotmartSaida')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcAfiliados')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcCursos')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcProdutor')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcRegioes')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcStatus')]",
				"[concat(variables('factoryId'), '/datasets/tblsrcTipoPagamento')]",
				"[concat(variables('factoryId'), '/datasets/dsfatVendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfstgCursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblsrcCursos",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "tblStgCursos",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblStgCursos",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "tblStgCursos",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "tblStgCursos",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "ClassSource"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "ClassStage"
						},
						{
							"name": "NewSource"
						},
						{
							"name": "NewStage"
						},
						{
							"name": "JoinLeft"
						},
						{
							"name": "DataStartEnd"
						},
						{
							"name": "NovosRegistros"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as string,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"source sort(asc(Id, true)) ~> ClassSource",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"Ativos sort(asc(BK, true)) ~> ClassStage",
						"ClassSource select(mapColumn(",
						"          Id_SRC = Id,",
						"          CodProdOrigine = BK,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewSource",
						"ClassStage select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          CodProdOrigine_STG = CodProdOrigine,",
						"          Nome_STG = Nome,",
						"          DataInicio,",
						"          DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewStage",
						"NewSource, NewStage join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLeft",
						"JoinLeft derive(dataStartEnd = toDate(currentTimestamp())) ~> DataStartEnd",
						"DataStartEnd split(isNull(BK_STG),",
						"     (Id_SRC == BK_STG) && (Nome_SRC != Nome_STG),",
						"     (Id_SRC == BK_STG) && (Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> NovosRegistros@(NovosRegistros, Update, Inativar)",
						"NovosRegistros@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(Nome_SRC!=Nome_STG))) ~> alterRow1",
						"NovosRegistros@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          CodProdOrigine,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageNew",
						"NovosRegistros@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          CodProdOrigine,",
						"          Nome = Nome_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageUpdate",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          CodProdOrigine = CodProdOrigine_STG,",
						"          Nome = Nome_STG,",
						"          DataInicio,",
						"          DataFim = dataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblsrcCursos')]",
				"[concat(variables('factoryId'), '/datasets/tblStgCursos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfstgRegiao')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tblsrcRegioes",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "tblStgRegioes",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tblStgRegioes",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "tblStgRegioes",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "tblStgRegioes",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "ClassSource"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "ClassStage"
						},
						{
							"name": "NewSource"
						},
						{
							"name": "NewStage"
						},
						{
							"name": "JoinLeft"
						},
						{
							"name": "DataStartEnd"
						},
						{
							"name": "NovosRegistros"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"source sort(asc(Id, true)) ~> ClassSource",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"Ativos sort(asc(BK, true)) ~> ClassStage",
						"ClassSource select(mapColumn(",
						"          Id_SRC = Id,",
						"          DDD_SRC = DDD,",
						"          Estado_SRC = Estado,",
						"          Cidade_SRC = Cidade",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewSource",
						"ClassStage select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          DDD_STG = DDD,",
						"          Cidade_STG = Cidade,",
						"          Estado_STG = Estado,",
						"          DataInicio,",
						"          DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NewStage",
						"NewSource, NewStage join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLeft",
						"JoinLeft derive(dataStartEnd = toDate(currentTimestamp())) ~> DataStartEnd",
						"DataStartEnd split(isNull(BK_STG),",
						"     (Id_SRC == BK_STG) && (DDD_SRC != DDD_STG || Cidade_SRC != Cidade_STG || Estado_SRC != Estado_STG),",
						"     (Id_SRC == BK_STG) && (DDD_SRC != DDD_STG || Cidade_SRC != Cidade_STG || Estado_SRC != Estado_STG),",
						"     disjoint: true) ~> NovosRegistros@(NovosRegistros, Update, Inativar)",
						"NovosRegistros@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(DDD_SRC!=DDD_STG||Cidade_SRC!=Cidade_STG||Estado_SRC!=Estado_STG))) ~> alterRow1",
						"NovosRegistros@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          DDD = DDD_SRC,",
						"          Cidade = Cidade_SRC,",
						"          Estado = Estado_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageNew",
						"NovosRegistros@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          DDD = DDD_SRC,",
						"          Cidade = Cidade_SRC,",
						"          Estado = Estado_SRC,",
						"          DataInicio = dataStartEnd",
						"     )) ~> StageUpdate",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          DDD = DDD_STG,",
						"          Cidade = Cidade_STG,",
						"          Estado = Estado_STG,",
						"          DataInicio,",
						"          DataFim = dataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblsrcRegioes')]",
				"[concat(variables('factoryId'), '/datasets/tblStgRegioes')]"
			]
		}
	]
}